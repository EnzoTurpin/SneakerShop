{% extends 'base.html.twig' %}
{% block title %}Mon Panier{% endblock %}
{% block body %}
<div class="container mx-auto px-4 py-8">
  <h1 class="text-2xl font-bold mb-6">Votre Panier</h1>

  {% if cartItems is empty %}
    <p class="text-gray-600">Votre panier est vide.</p>
  {% else %}
    <table class="min-w-full bg-white border border-gray-300 rounded-lg overflow-hidden">
      <thead class="bg-gray-200">
        <tr>
          <th class="px-4 py-2 text-left">Article</th>
          <th class="px-4 py-2 text-center">Taille</th>
          <th class="px-4 py-2 text-center">Quantité</th>
          <th class="px-4 py-2 text-right">Prix</th>
          <th class="px-4 py-2 text-center">Action</th>
        </tr>
      </thead>
      <tbody>
        {% for item in cartItems %}
          <tr class="border-t" data-article-id="{{ item.article.id }}" data-taille="{{ item.taille }}">
            <td class="px-4 py-2">
              <div class="flex items-center">
                <img src="{{ item.article.imageUrl }}" alt="{{ item.article.nom }}" class="w-20 h-20 object-cover rounded mr-4" />
                <span>{{ item.article.nom }}</span>
              </div>
            </td>
            <td class="px-4 py-2 text-center">{{ item.taille }}</td>
            <td class="px-4 py-2 text-center">
              <input type="number" class="update-quantity border w-16 px-2 py-1 text-center rounded"
                     data-id="{{ item.article.id }}" data-taille="{{ item.taille }}"
                     min="1" max="10" value="{{ item.quantite }}" />
            </td>
            <td class="px-4 py-2 text-right font-bold text-green-600 price-cell">
              {{ (item.article.prix * item.quantite)|number_format(2, ',', ' ') }} €
            </td>
            <td class="px-4 py-2 text-center">
              <button class="text-red-600 hover:text-red-800 remove-item"
                      data-id="{{ item.article.id }}" data-taille="{{ item.taille }}">
                ❌ Supprimer
              </button>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
    <div class="border-t border-gray-400 my-4"></div>
    <div class="mt-6 text-left text-xl font-bold">
      Total : <span id="total-price">{{ total_price|number_format(2, ',', ' ') }} €</span>
    </div>
  {% endif %}
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {

  // Fonction qui met à jour le DOM à partir des données JSON renvoyées
  function updateCartDOM(data, row) {
    console.log("Mise à jour du DOM avec :", data);
    if (data.article_price && data.total_price) {
      if (row) {
        row.querySelector(".price-cell").textContent = data.article_price;
      }
      document.getElementById("total-price").textContent = data.total_price;
    } else {
      console.error("La réponse JSON ne contient pas les clés attendues", data);
    }
  }

  // Mise à jour de la quantité d'un article
  document.querySelectorAll(".update-quantity").forEach((input) => {
    input.addEventListener("change", function () {
      const articleId = this.dataset.id;
      const taille = this.dataset.taille;
      const nouvelleQuantite = this.value;
      const row = this.closest("tr");
      console.log("Changement de quantité pour l'article", articleId, "taille:", taille, "-> quantité:", nouvelleQuantite);

      fetch(`/cart/update/${articleId}`, {
        method: "POST",
        headers: {
          "X-Requested-With": "XMLHttpRequest",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ quantite: nouvelleQuantite, taille: taille }),
      })
      .then((response) => {
        console.log("Statut de la réponse:", response.status);
        return response.json();
      })
      .then((data) => {
        console.log("Données reçues:", data);
        updateCartDOM(data, row);
      })
      .catch((error) => console.error("Erreur AJAX lors de la mise à jour:", error));
    });
  });

  // Suppression d'un article du panier
  document.querySelectorAll(".remove-item").forEach((button) => {
    button.addEventListener("click", function () {
      const articleId = this.dataset.id;
      const taille = this.dataset.taille;
      const row = this.closest("tr");
      console.log("Suppression de l'article", articleId, "taille:", taille);

      fetch(`/cart/remove/${articleId}`, {
        method: "POST",
        headers: { "X-Requested-With": "XMLHttpRequest" },
      })
      .then((response) => response.json())
      .then((data) => {
        console.log("Données de suppression reçues:", data);
        row.remove();
        document.getElementById("total-price").textContent = data.total_price;
      })
      .catch((error) => console.error("Erreur AJAX lors de la suppression:", error));
    });
  });
});
</script>
{% endblock %}
